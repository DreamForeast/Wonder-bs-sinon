// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon from "../../src/sinon.js";
import * as Sinon$1 from "sinon";
import * as Wonder_jest from "../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";

describe("test sinon", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        Wonder_jest.test("test1", (function (param) {
                var stub = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                stub(1, 2);
                return Curry._2(Wonder_jest.Expect[/* Operators */25][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getArgsFromEmptyStub(Sinon.getCall(0, stub))), /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ]);
              }));
        Wonder_jest.test("test2", (function (param) {
                var obj = {
                  func: (function (x, y) {
                      return x + y | 0;
                    })
                };
                var stub = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func");
                var func = obj.func;
                Curry._2(func, 1, 2);
                return Curry._2(Wonder_jest.Expect[/* Operators */25][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getArgs(Sinon.getCall(0, stub))), /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ]);
              }));
        Wonder_jest.test("test withOneArg", (function (param) {
                var stub = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                Sinon.returns(10, Sinon.withOneArg(1, stub));
                Sinon.returns(20, Sinon.withOneArg(2, stub));
                return Curry._2(Wonder_jest.Expect[/* Operators */25][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                stub(1),
                                stub(2)
                              ]), /* tuple */[
                            10,
                            20
                          ]);
              }));
        Wonder_jest.test("test onCall,getCall", (function (param) {
                var stub = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                Sinon.returns(10, Sinon.onCall(0, stub));
                Sinon.returns(20, Sinon.onCall(1, stub));
                var v1 = stub();
                var v2 = stub(1, 2, "aaa");
                return Curry._2(Wonder_jest.Expect[/* Operators */25][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                v1,
                                v2,
                                Sinon.getArgs(Sinon.getCall(1, stub))
                              ]), /* tuple */[
                            10,
                            20,
                            /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  "aaa",
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
              }));
        describe("test extended sinon matcher for jest", (function () {
                Wonder_jest.test("test toCalledWith", (function (param) {
                        var obj = {
                          func: (function (x, y) {
                              return x + y | 0;
                            })
                        };
                        var stub = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func");
                        var func = obj.func;
                        Curry._2(func, 1, 2);
                        return Sinon.toCalledWith(/* array */[
                                    2,
                                    2
                                  ], Wonder_jest.Expect[/* not__ */24](Wonder_jest.Expect[/* expect */0](Sinon.getCall(0, stub))));
                      }));
                Wonder_jest.test("test toCalledBefore", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            }),
                          func2: (function (x, y) {
                              return x - y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var stub2 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func2");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        var func$1 = obj.func2;
                        Curry._2(func$1, 2, 3);
                        return Sinon.toCalledBefore(stub2, Wonder_jest.Expect[/* expect */0](stub1));
                      }));
                Wonder_jest.test("test toCalledAfter", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            }),
                          func2: (function (x, y) {
                              return x - y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var stub2 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func2");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        var func$1 = obj.func2;
                        Curry._2(func$1, 2, 3);
                        return Sinon.toCalledAfter(stub1, Wonder_jest.Expect[/* expect */0](stub2));
                      }));
                Wonder_jest.test("test toCalled", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        return Sinon.toCalled(Wonder_jest.Expect[/* expect */0](stub1));
                      }));
                Wonder_jest.test("test toCalledOnce", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        Curry._2(func, 2, 2);
                        return Sinon.toCalledOnce(Wonder_jest.Expect[/* not__ */24](Wonder_jest.Expect[/* expect */0](stub1)));
                      }));
                Wonder_jest.test("test toCalledTwice", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        Curry._2(func, 2, 2);
                        return Sinon.toCalledTwice(Wonder_jest.Expect[/* expect */0](stub1));
                      }));
                Wonder_jest.test("test toCalledThrice", (function (param) {
                        var obj = {
                          func1: (function (x, y) {
                              return x + y | 0;
                            })
                        };
                        var stub1 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                        var func = obj.func1;
                        Curry._2(func, 1, 2);
                        Curry._2(func, 2, 2);
                        Curry._2(func, 3, 2);
                        return Sinon.toCalledThrice(Wonder_jest.Expect[/* expect */0](stub1));
                      }));
                return Wonder_jest.test("test getCallCount", (function (param) {
                              var obj = {
                                func1: (function (x, y) {
                                    return x + y | 0;
                                  }),
                                func2: (function (x, y) {
                                    return x - y | 0;
                                  })
                              };
                              Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func1");
                              var stub2 = Curry._3(Sinon.createMethodStub, sandbox[0], obj, "func2");
                              var func = obj.func1;
                              Curry._2(func, 1, 2);
                              Curry._2(func, 2, 2);
                              var func$1 = obj.func2;
                              Curry._2(func$1, 2, 3);
                              return Curry._2(Wonder_jest.Expect[/* Operators */25][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(stub2)), 1);
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
